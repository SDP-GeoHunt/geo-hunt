package com.github.geohunt.app.data.network

import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ktx.snapshots
import kotlinx.coroutines.CoroutineDispatcher
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flowOn
import kotlinx.coroutines.flow.map
import kotlin.time.Duration
import kotlin.time.Duration.Companion.seconds

/**
 * This class provides utility methods for detecting connection state to Firebase's database,
 * which can be listened to detect disconnection/reconnection events.
 */
class NetworkMonitor(
    database: FirebaseDatabase,
    ioDispatcher: CoroutineDispatcher = Dispatchers.IO
) {
    val isConnected: Flow<Boolean> =
        // This is a special reference generated by Firebase itself
        // See https://firebase.google.com/docs/database/android/offline-capabilities#section-connection-state
        database.getReference(".info/connected")
                .snapshots
                .map { it.getValue(Boolean::class.java) ?: false }
                // Somehow the debounce make tests fail...
                // Keep commented until there is a fix
                // .debounce(CONNECTIVITY_STATE_DEBOUNCE) // Keep values that are present for at least 3 seconds
                .flowOn(ioDispatcher)
    
    companion object {
        /**
         * Returns the time needed for a connectivity state to be considered "stable", and hence
         * being emitted by the [isConnected] flow.
         */
        val CONNECTIVITY_STATE_DEBOUNCE: Duration = 3.seconds
    }
}
